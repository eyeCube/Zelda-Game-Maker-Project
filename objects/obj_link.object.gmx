<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_link_walking</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///STATES/ATTRIBUTES


gameover=0


imageangle=0
imagespin=0
imagespeed=0
alarm6=2


shifting_view=0

can_shift_view=0

screen_shake=0

waveindex=0
    


dead=0
drown=0
warp=0
warpt=0

sprite_index=spr_link_walking
sprite_index_drawn=spr_link_walking
hurt_sprite=spr_link_walking_hurt
sprite_fall=spr_link_falling
sprite_drown=spr_link_drowning



wet=0
splash=0
xg=0
yg=0




hole_pulling=0


can_move=1


bombing=0


likeliked=0


lift=0

pushing_dir=0
push_i=0


hit=0
stunned=0
burned=0
frozen=0
shocked=0
slowed=0
held=0

knockback=0

burn_damage_timer=0

holder=-1

jump=0
cliff_jump=0
jumping_speed=0
z=0

windy=0
alarm7=30


mass=10

notched=0
can_shoot=1
bow_charge=0


imageangle=0
imagespin=0
imagespeed=0
alarm6=2

sword_beam_delay=0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MOVEMENT

aim=global.link_aim

image_speed=0
image_index=global.link_image_index
image_index_mod=0 //global.link_image_index_mod
image_index_mod_change=.13

diagonal_speed_reduction_mod=.5

jump_speed=0
jump_dir_real=0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
///going to the right spot



    if global.link_x!=-1
    x=global.link_x
    if global.link_y!=-1
    y=global.link_y    
    
    
    newx=global.view_x
    newy=global.view_y
    
    
    
    if global.link_z!=-1
    {
        z=global.link_z
        global.link_z=-1
        
        
        //so you get teethed in by doors even if you fall into the room
        with obj_teeth_door_spawner
        if x&gt;global.view_x
        if x&lt;global.view_x+view_wview
        if y&gt;global.view_y
        if y&lt;global.view_y+view_hview
        {
            x=obj_link.x
            y=obj_link.y
            sprite_index=spr_box
            image_xscale=16
            image_yscale=16
        }
        
        
        with obj_enemy_par
        {
        stopped=30
        stopped2=30
        stunned=30
        }
        
        
        jump=1
        
        z_change=0
        
        imagespeed=0
        imagexflip=1
        imageyflip=1
        imageangle=0
        imagespin=0
        
        jump_speed=0
        
        alarm[6]=alarm6
        
        image_index_revert=global.link_image_index
        image_index=0
        
        
        jump_dir=global.link_image_index*90
        jump_dir_real=-1
        
        
            if global.link_image_index=0
            {
            sprite_index=spr_link_rolling_horizontal
            hurt_sprite=spr_link_rolling_horizontal_hurt
            imagespin=-90
            }
            
            if global.link_image_index=1
            {
            sprite_index=spr_link_rolling_vertical
            hurt_sprite=spr_link_rolling_vertical_hurt
            imagespeed=1
            }
            
            if global.link_image_index=2
            {
            sprite_index=spr_link_rolling_horizontal
            hurt_sprite=spr_link_rolling_horizontal_hurt
            imagespin=90
            imagexflip=-1
            }
            
            if global.link_image_index=3
            {
            sprite_index=spr_link_rolling_vertical
            hurt_sprite=spr_link_rolling_vertical_hurt
            imagespeed=1
            imageyflip=-1
            }
            
            image_index=0
            
            alarm[10]=2
    }
   
    
    
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spring_heal=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if dead=1
exit
if sprite_index=spr_link_knocked_down exit
if sprite_index=spr_link_got_item_big exit
if sprite_index=spr_link_got_item_small exit

can_move=1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
        if global.link_move_outside=1
        move_outside_solid(point_direction(global.view_x+view_wview/2,global.view_y+view_hview/2,x,y),128)
        if global.link_move_inside=1
        move_outside_solid(point_direction(x,y,global.view_x+view_wview/2,global.view_y+view_hview/2),128)
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///lifting

if sprite_index!=spr_link_pulling exit

if instance_exists(lift_obj)=0 exit

sprite_index=spr_link_holding


can_move=1
lift=1


with lift_obj
{
    hold_height=14
    if object_index=obj_bomb
    hold_height=10
    
    obj=instance_create(x,y,obj_held_object)
    obj.sprite_index=sprite_index
    obj.held=obj_link
    obj.hold_height=hold_height
    obj.weight=weight
    obj.particle_sprite=sprite_index

    if object_index=obj_bomb
    {
        obj.type='bomb'
        obj.bounciness=bounciness
        obj.size=size
        obj.damage=damage
        obj.knockback=knockback
        obj.timer=timer
        obj.alarm[1]=max(1,alarm[1])
        obj.mode=mode
    }
    else
    if object_index!=obj_beamos
    {
        obj.image_index_random=image_index_random
        obj.contents=contents
        obj.contents_chance=contents_chance
    }
    else
    {
        obj.image_index_random=0
        //we deal with contents by just creating a beamos
        obj.contents_chance=0
        obj.contents=0
        
        obj.image_index=image_index
        obj.size=bomb_size
        obj.damage=bomb_damage
        obj.knockback=bomb_knockback
        obj.timer=death_timer
    }
    
    
    obj_link.lift_obj=obj
    
    create_loot=0
    instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///lifting

if sprite_index!=spr_link_pulling exit

if instance_exists(lift_obj)=0 exit

if lift_obj.weight&gt;global.link_lift exit

hurt_sprite=spr_link_pulling_hurt


with lift_obj
{
    if object_index=obj_barrier_par
    {
        x=round(obj_link.x+lengthdir_x(16,obj_link.pushing_dir)-8)
        y=round(obj_link.y+lengthdir_y(16,obj_link.pushing_dir)-8)
    }
    if object_index=obj_beamos
    {
        x=round(obj_link.x+lengthdir_x(16,obj_link.pushing_dir))
        y=round(obj_link.y+lengthdir_y(16,obj_link.pushing_dir))
    }
    if object_index=obj_bomb
    {
        x=round(obj_link.x+lengthdir_x(8,obj_link.pushing_dir))
        y=round(obj_link.y+lengthdir_y(8,obj_link.pushing_dir))
    }
}

alarm[9]=3+max(0,(lift_obj.weight-1)*2)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.show_inventory=1
{
    alarm[7]=1
    exit
}
windy=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///jump spin animation


if global.show_inventory=1
{
    alarm[6]=1
    exit
}


alarm[6]=alarm6

if jump=1
{
    if jump_dir=0
    or jump_dir=180
    imageangle+=imagespin
    if jump_dir=90
    or jump_dir=270
    image_index+=imagespeed
    
    if image_index&gt;=3
    image_index-=3
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_shoot=1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if dead=1 exit
if sprite_index=spr_link_knocked_down exit

    
    //
        if sprite_index=spr_link_got_item_big
        or sprite_index=spr_link_got_item_small
        image_index=3
    //


sprite_index=spr_link_walking
hurt_sprite=spr_link_walking_hurt

can_move=1


image_index_mod=0
if round(image_index)=3
or round(image_index)=1
image_index_mod=1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if sprite_index=spr_link_knocked_down exit
if sprite_index=spr_link_got_item_big exit
if sprite_index=spr_link_got_item_small exit

image_index_mod+=1
notched=1
bow_charge=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index_drawn+=4
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if sprite_index=spr_link_knocked_down exit
if sprite_index=spr_link_got_item_big exit
if sprite_index=spr_link_got_item_small exit

if dead=1
exit

alarm[2]=1

if bombing=1
{
    if instance_exists(bomb_obj)=0
    {
        bombing=0
        exit
    }
    
    bomb_obj.x=round(x+xg+lengthdir_x(10,image_index*90))-1
    bomb_obj.y=round(y+yg+lengthdir_y(10,image_index*90))+3
    bomb_obj.depth=-40
    bombing=0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if dead=1
exit
if sprite_index=spr_link_knocked_down exit
if sprite_index=spr_link_got_item_big exit
if sprite_index=spr_link_got_item_small exit


if instance_exists(obj_links_sword)=0
{
    if keyboard_check(ord('V'))
    if global.item_V="Magic Rod"
    exit
    if keyboard_check(ord('C'))
    if global.item_C="Magic Rod"
    exit
    if keyboard_check(ord('X'))
    if global.item_X="Magic Rod"
    exit
    if keyboard_check(ord('Z'))
    if global.item_Z="Magic Rod"
    exit
}


can_move=1
sprite_index=spr_link_walking
hurt_sprite=spr_link_walking_hurt
image_index_drawn-=4


if instance_exists(obj_links_sword)=1
if keyboard_check(obj_links_sword.charge_button)=0
or keyboard_check_pressed(obj_links_sword.charge_button)=1
{
    if check_left=1
    {
        if check_down=0
        if check_up=0
        image_index=2
    }
    else if check_right=1
    {
        if check_down=0
        if check_up=0
        image_index=0
    }
    if check_up=1
    {
        if check_left=0
        if check_right=0
        image_index=1
    }
    else if check_down=1
    {
        if check_left=0
        if check_right=0
        image_index=3
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///VIEW SHIFTING, AUTOSAVING


var yay;
yay=0


if instance_exists(obj_celled_room)

if shifting_view=0
{
    
    if obj_link.hit&lt;0
    {
        
        if x&lt;=global.view_x
        {
            if can_shift_view&lt;=0
            {
                
                if place_meeting(global.view_x,y,obj_barrier_par)=0
                {
                    x=global.view_x
                }
                shifting_view=1
                
                newx=global.view_x-224
                newy=global.view_y
                shifting='l'
                
            }
            else
            x=global.view_x
        }
        
        if x&gt;=global.view_x+224
        {
            if can_shift_view&lt;=0
            {
            
                if place_meeting(global.view_x+224,y,obj_barrier_par)=0
                {
                    x=global.view_x+224
                }
                shifting_view=1
                
                newx=global.view_x+224
                newy=global.view_y
                shifting='r'
                    
            }
            else
            x=global.view_x+224
        }
        
        if y&lt;=global.view_y
        {
            if can_shift_view&lt;=0
            {
            
                if place_meeting(x,global.view_y,obj_barrier_par)=0
                {
                    y=global.view_y
                }
                shifting_view=1
                
                newx=global.view_x
                newy=global.view_y-192
                shifting='u'
                        
            }
            else
            y=global.view_y
        }
        
        if y&gt;=global.view_y+192
        {
            if can_shift_view&lt;=0
            {
            
                if place_meeting(x,global.view_y+192,obj_barrier_par)=0
                {
                    y=global.view_y+192
                }
                shifting_view=1
                
                newx=global.view_x
                newy=global.view_y+192
                shifting='d'
                        
            }
            else
            y=global.view_y+192
        }
        
    }
    
    
    if shifting_view=1
    {
        instance_activate_object(obj_enemy_par)
        with obj_enemy_par spawn_warp=0
        with obj_spawn_point used=0
        with obj_enemy_bolt
        {
            speed=0
            jump_speed=0
        }
        yay=1
    }
    
    
}





//////

if shifting_view=1
{
        
        
        
        
        with obj_particle                 
        if x&lt;view_xview+8
                or y&lt;view_yview+8
                or x&gt;view_xview-8+view_wview
                or y&gt;view_yview-8+view_hview
                instance_destroy()
                
        with obj_boomerang               
        if x&lt;view_xview+8
                or y&lt;view_yview+8
                or x&gt;view_xview-8+view_wview
                or y&gt;view_yview-8+view_hview
                instance_destroy()
                
        with obj_item_par
        {
        if persistent=0
        if deletes_when_moving_screens=1
        if variable_local_exists("event_id")=0
                if x&lt;view_xview+8
                or y&lt;view_yview+8
                or x&gt;view_xview-8+view_wview
                or y&gt;view_yview-8+view_hview
        instance_destroy()
        }
        
        with obj_enemy_bolt
        {
        if stuck=0
                        if x&lt;view_xview+8
                or y&lt;view_yview+8
                or x&gt;view_xview-8+view_wview
                or y&gt;view_yview-8+view_hview
        instance_destroy()
        }
        
        with obj_links_bolt                 
        if x&lt;view_xview+8
                or y&lt;view_yview+8
                or x&gt;view_xview-8+view_wview
                or y&gt;view_yview-8+view_hview
                instance_destroy()
                
        with obj_bomb                 
        if x&lt;view_xview+8
                or y&lt;view_yview+8
                or x&gt;view_xview-8+view_wview
                or y&gt;view_yview-8+view_hview
                instance_destroy()
        
        
        
        can_move=0
    
        
        var mt;
        mt=.45
        
        if distance_to_object(obj_teeth_door_spawner)&lt;20
        {
            mt=1.6
        }
        
        
        if shifting='l'
        {
            global.view_x-=global.view_shift_speed
            if place_meeting(x-mt,y,obj_barrier_par)=0
            x-=mt
            
            if global.view_x&lt;newx
            {
                global.view_x=newx
                shifting_view=0
            }
        }
        if shifting='r'
        {
            global.view_x+=global.view_shift_speed
            if place_meeting(x+mt,y,obj_barrier_par)=0
            x+=mt
            
            if global.view_x&gt;newx
            {
                global.view_x=newx
                shifting_view=0
            }
        }
        if shifting='u'
        {
            global.view_y-=global.view_shift_speed
            if place_meeting(x,y-mt,obj_barrier_par)=0
            y-=mt
            
            if global.view_y&lt;newy
            {
                global.view_y=newy
                shifting_view=0
            }
        }
        if shifting='d'
        {
            global.view_y+=global.view_shift_speed
            if place_meeting(x,y+mt,obj_barrier_par)=0
            y+=mt
            
            if global.view_y&gt;newy
            {
                global.view_y=newy
                shifting_view=0
            }
        }
        
        if shifting_view=0
        {
            can_move=1
            global.link_x=x
            global.link_y=y
            global.link_image_index=image_index
            
            
            with obj_draw_control_high
            {
                alarm[10]=2
            }
            
            
            with obj_autosave
            {
                if x&gt;=global.view_x
                if x&lt;=global.view_x+view_wview
                if y&gt;=global.view_y
                if y&lt;global.view_y+view_hview-16
                {
                    game_save("autosave")
                }
            }
        }
        
        
    
    
    
        
    with obj_enemy_par
        {
            
            aggro=0
            sprint=0
            
            speed=0
            stunned=2
            stopped=2
            
            
        
            
        ///warping to spawn point
            
            {
    
    
    
        //if other.shifting_view=0 //at the end of the view shift
        
    if spawner=1
    {
    
    if instance_exists(obj_spawn_point)
    and spawn_warp=1
    {
    
        temp_id=instance_find(obj_spawn_point, irandom_range(0,instance_number(obj_spawn_point)-1)  )
        
            repeat(1200)
            {
                if temp_id.used=1
                {
                temp_id=instance_find(obj_spawn_point, irandom_range(0,instance_number(obj_spawn_point)-1)  )
                }
                else
                break
            }
            
        
        spawn_warp=0
        temp_id.used=1
        x=temp_id.x
        y=temp_id.y
    }

       
    }    
    
        ///
        
    //going back to their original places
        
    else
    {
    
        var go;
        go=1
    
        if x&gt;=other.newx
        and y&gt;other.newy
        and x&lt;other.newx+view_wview
        and y&lt;other.newy+view_hview
        go=0
                
                
            if go=1
            {
                if x&lt;view_xview+11
                or y&lt;view_yview+11
                or x&gt;view_xview-11+view_wview
                or y&gt;view_yview-11+view_hview
                {
                    
                    {
                    
                        x=xstart
                        y=ystart
                        
                        draw=0
                        //this is reverted in step event of high draw control
                        
                    }
                }
            }
    
    }
    
    
    if yay=1
    {
    
        if other.shifting_view=1
        {
            if x&gt;=other.newx
            and y&gt;other.newy
            and x&lt;other.newx+view_wview
            and y&lt;other.newy+view_hview
            spawn_warp=1
        }
        else
        {
            if x&gt;=global.view_x
            and y&gt;global.view_y
            and x&lt;global.view_x+view_wview
            and y&lt;global.view_y+view_hview
            spawn_warp=1
        }
    }
                
                
            
            }
            
        }
            
            
            
        can_shift_view=15
    
    }


//////





/*
if global.show_inventory=1
{

view_xview=global.view_x
view_yview=(min(y-view_hview+32,    global.view_y+16))

if view_xview&lt;global.view_x
view_xview=global.view_x
if view_yview&lt;-128+global.view_y
view_yview=-128+global.view_y
if view_xview&gt;global.view_x+view_wview
view_xview=global.view_x+view_wview
if view_yview&gt;global.view_y
view_yview=global.view_y

}*/



//if global.show_inventory=0
{

var xf, yf;
xf=0
yf=0

if hit&gt;=global.link_hit-global.hit_screen_shake_time
or shocked&gt;0
or screen_shake&gt;0
{
    xf=choose(1,0,-1)
    yf=choose(1,0,-1)
    screen_shake-=1
}

if instance_exists(obj_swaying_room)
{
    var xb;
    xb=.9
    if room=rm_deku_tree_f3
    {
    if view_yview&lt;300
    xb=.9
    if view_yview&lt;100
    xb=1.62
    }
    xf=sin(obj_swaying_room.i)*xb
}

view_xview=global.view_x
view_yview=global.view_y-16

if view_xview&lt;0
view_xview=0
if view_yview&lt;-16
view_yview=-16
if view_xview&gt;room_width-view_wview
view_xview=room_width-view_wview
if view_yview&gt;room_height-view_hview
view_yview=room_height-view_hview

view_xview+=xf
view_yview+=yf

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///STATUS


if stunned&gt;0
can_move=1


can_shift_view-=1



if hit&gt;0
or held&gt;0
or sprite_index=spr_link_knocked_down
{

/*
    if lift=0
    if sprite_index=spr_link_pulling
    {
    sprite_index=spr_link_walking
    can_move=1
    }
*/
    
    if lift=1
    {
        if sprite_index!=spr_link_knocked_down
        {
            sprite_index=spr_link_walking
            can_move=1
        }
        
            
            if lift_obj.type='thrown'
            {
                lift_obj.jump=1
                lift_obj.y=y
                lift_obj.z=14
            }
            if lift_obj.type='bomb'
            {
                obj=instance_create(x,y,obj_bomb)
                obj.timer=lift_obj.timer
                obj.damage=lift_obj.damage
                obj.size=lift_obj.size
                obj.knockback=lift_obj.knockback
                obj.mode=lift_obj.mode
                obj.alarm[1]=lift_obj.alarm[1]
                obj.z=14
                obj.jump=1
                with lift_obj instance_destroy()
            }
    }
    
    
    lift=0
}




/////////////////////////////////////////////////////////
if dead=1
{
    hit=0
    exit
}
if global.show_inventory=1
{
    if hit&gt;0
    sprite_index_drawn=hurt_sprite
    
    exit
}
/////////////////////////////////////////////////////////



if z&gt;0
splash=1


if warp
{
    warpt+=1
    if warpt&gt;35
    obj_draw_control_high.blackout+=.2
    
    if warpt&gt;45
    {    
        
        if view_x_to=-1
        global.view_x=view_xview
        else
        global.view_x=view_x_to
        
        if view_y_to=-1
        global.view_y=view_yview+16
        else
        global.view_y=view_y_to
        
        
        
        room_goto(room_to)    
    }
}




stunned-=1
burned-=1
if burned&gt;0
burn_damage_timer-=1
if burn_damage_timer&lt;0 burn_damage_timer=0
frozen-=1
shocked-=1
slowed-=1

sword_beam_delay-=1


if wet=0
spring_heal=20
else
{
    if spring_heal&lt;0
    if place_meeting(x,y,obj_spring_water)
    {
        spring_heal=20
        global.link_life+=1
        if global.link_life&gt;global.link_life_max
        global.link_life=global.link_life_max
    }
    spring_heal-=1
}


if windy=1
burned=0


if notched=0
bow_charge-=1
else
bow_charge+=1


if sprite_index=spr_link_holding
if lift_obj.weight&gt;=3
slowed=1



if sprite_index=spr_link_pushing
or cliffing=1
{
    push_i+=1
}
else
push_i=0


global.link_speed_boost-=1

if instance_exists(holder)=0
{

    held=0

}



    sprite_index_drawn=sprite_index

    
if warp=0
{
    
    hit-=1
    if sprite_index=spr_link_knocked_down
    if hit&lt;1
    hit=1
    
    if hit&gt;0
    {
    if is_even(hit)=0
    {
    sprite_index_drawn=hurt_sprite
    }
    }

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///burned


if burned&gt;0
{

    burn_damage_timer+=2
    
    if burn_damage_timer&gt;=global.burn_damage_step
    if hit&lt;=0
    {
        global.link_life-=1
        hit=global.link_hit
        burn_damage_timer=0
    }

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///regulating it so you can't be burned and frozen simultaneously

if burned&gt;0
and frozen&gt;0
{

    var temp_var;
    temp_var=min(burned,frozen)
    
    burned-=temp_var
    frozen-=temp_var
    stunned=frozen

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///WARPING WITH CONSOLE



if keyboard_check(vk_space)
{
    if mouse_check_button_pressed(mb_left)
    {
        x=mouse_x
        y=mouse_y
    }
    if keyboard_check_pressed(ord("I"))
    {
        room_goto_next()
    }
    if keyboard_check_pressed(ord("U"))
    {
        room_goto_previous()
    }
    
        if keyboard_check_pressed(ord("Y"))=1
        {
        
            console=get_string("Enter Console Command","")
            execute_string(console)
        
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cliffing=0

hole_pulling=0

if z=0
splash=0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///pausing

if global.show_inventory
{
    if alarm[4]&gt;0
    alarm[4]+=1
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.show_inventory=1 exit
if shifting_view=1 exit
if stunned&gt;0 exit
if sprite_index=spr_link_knocked_down exit

if keyboard_check_pressed(ord('Z'))
{
    if global.item_Z="Magic Rod"
    {
    scr_magic_rod(spr_links_magic_rod)
    exit
    }
    if global.item_Z="Magic Wand"
    {
    scr_magic_rod(spr_links_magic_wand)
    exit
    }
    if global.item_Z="Boomerang"
    {
    scr_boomerang()
    exit
    }
    if global.item_Z="Magic Boomerang"
    {
    scr_magic_boomerang()
    exit
    }
    if global.item_Z="Wooden Sword"
    {
    scr_sword(spr_links_sword_wooden,global.wooden_sword_damage,ord('Z'),0,0)
    exit
    }
    if global.item_Z="Kokiri Sword"
    {
    scr_sword(spr_links_sword_kokiri,global.kokiri_sword_damage,ord('Z'),global.kokiri_sword_light,0)
    exit
    }
    if global.item_Z="Razor Sword"
    {
    scr_sword(spr_links_sword_razor,global.razor_sword_damage,ord('Z'),global.razor_sword_light,0)
    exit
    }
    if global.item_Z="Master Sword"
    {
    scr_sword(spr_links_sword_master,global.master_sword_damage,ord('Z'),global.biggorons_sword_light,0)
    exit
    }
    if global.item_Z="Bow"
    {
    scr_bow()
    exit
    }
    if global.item_Z="Silver Bow"
    {
    scr_bow()
    exit
    }
    if global.item_Z="Biggorons Sword"
    {
    scr_sword(spr_links_sword_biggorons,global.biggorons_sword_damage,ord('Z'),global.biggorons_sword_light,global.biggorons_sword_force)
    exit
    }
    if global.item_Z="Ocarina of Time"
    {
    scr_ocarina_of_time()
    exit
    }
    if global.item_Z="Feather"
    {
    scr_feather()
    exit
    }
    if global.item_Z="Bombs"
    {
    scr_bombs()
    exit
    }
    if global.item_Z="Dins Essence"
    {
    scr_dins_essence()
    exit
    }
    if global.item_Z="Nayrus Essence"
    {
    scr_nayrus_essence()
    exit
    }
    if global.item_Z="Farores Essence"
    {
    scr_farores_essence()
    exit
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.show_inventory=1 exit
if shifting_view=1 exit
if stunned&gt;0 exit
if sprite_index=spr_link_knocked_down exit


if keyboard_check_pressed(ord('X'))
{
    if global.item_X="Magic Rod"
    {
    scr_magic_rod(spr_links_magic_rod)
    exit
    }
    if global.item_X="Magic Wand"
    {
    scr_magic_rod(spr_links_magic_wand)
    exit
    }
    if global.item_X="Boomerang"
    {
    scr_boomerang()
    exit
    }
    if global.item_X="Magic Boomerang"
    {
    scr_magic_boomerang()
    exit
    }
    if global.item_X="Wooden Sword"
    {
    scr_sword(spr_links_sword_wooden,global.wooden_sword_damage,ord('X'),0,0)
    exit
    }
    if global.item_X="Kokiri Sword"
    {
    scr_sword(spr_links_sword_kokiri,global.kokiri_sword_damage,ord('X'),global.kokiri_sword_light,0)
    exit
    }
    if global.item_X="Razor Sword"
    {
    scr_sword(spr_links_sword_razor,global.razor_sword_damage,ord('X'),global.razor_sword_light,0)
    exit
    }
    if global.item_X="Master Sword"
    {
    scr_sword(spr_links_sword_master,global.master_sword_damage,ord('X'),global.master_sword_light,0)
    exit
    }
    if global.item_X="Bow"
    {
    scr_bow()
    exit
    }
    if global.item_X="Silver Bow"
    {
    scr_bow()
    exit
    }
    if global.item_X="Biggorons Sword"
    {
    scr_sword(spr_links_sword_biggorons,global.biggorons_sword_damage,ord('X'),global.biggorons_sword_light,global.biggorons_sword_force)
    exit
    }
    if global.item_X="Ocarina of Time"
    {
    scr_ocarina_of_time()
    exit
    }
    if global.item_X="Feather"
    {
    scr_feather()
    exit
    }
    if global.item_X="Bombs"
    {
    scr_bombs()
    exit
    }
    if global.item_X="Dins Essence"
    {
    scr_dins_essence()
    exit
    }
    if global.item_X="Nayrus Essence"
    {
    scr_nayrus_essence()
    exit
    }
    if global.item_X="Farores Essence"
    {
    scr_farores_essence()
    exit
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.show_inventory=1 exit
if shifting_view=1 exit
if stunned&gt;0 exit
if sprite_index=spr_link_knocked_down exit


if keyboard_check_pressed(ord('C'))
{
    if global.item_C="Magic Rod"
    {
    scr_magic_rod(spr_links_magic_rod)
    exit
    }
    if global.item_C="Magic Wand"
    {
    scr_magic_rod(spr_links_magic_wand)
    exit
    }
    if global.item_C="Boomerang"
    {
    scr_boomerang()
    exit
    }
    if global.item_C="Magic Boomerang"
    {
    scr_magic_boomerang()
    exit
    }
    if global.item_C="Wooden Sword"
    {
    scr_sword(spr_links_sword_wooden,global.wooden_sword_damage,ord('C'),0,0)
    exit
    }
    if global.item_C="Kokiri Sword"
    {
    scr_sword(spr_links_sword_kokiri,global.kokiri_sword_damage,ord('C'),global.kokiri_sword_light,0)
    exit
    }
    if global.item_C="Razor Sword"
    {
    scr_sword(spr_links_sword_razor,global.razor_sword_damage,ord('C'),global.razor_sword_light,0)
    exit
    }
    if global.item_C="Master Sword"
    {
    scr_sword(spr_links_sword_master,global.master_sword_damage,ord('C'),global.master_sword_light,0)
    exit
    }
    if global.item_C="Bow"
    {
    scr_bow()
    exit
    }
    if global.item_C="Silver Bow"
    {
    scr_bow()
    exit
    }
    if global.item_C="Biggorons Sword"
    {
    scr_sword(spr_links_sword_biggorons,global.biggorons_sword_damage,ord('C'),global.biggorons_sword_light,global.biggorons_sword_force)
    exit
    }
    if global.item_C="Ocarina of Time"
    {
    scr_ocarina_of_time()
    exit
    }
    if global.item_C="Feather"
    {
    scr_feather()
    exit
    }
    if global.item_C="Bombs"
    {
    scr_bombs()
    exit
    }
    if global.item_C="Dins Essence"
    {
    scr_dins_essence()
    exit
    }
    if global.item_C="Nayrus Essence"
    {
    scr_nayrus_essence()
    exit
    }
    if global.item_C="Farores Essence"
    {
    scr_farores_essence()
    exit
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.show_inventory=1 exit
if shifting_view=1 exit
if stunned&gt;0 exit
if sprite_index=spr_link_knocked_down exit


if keyboard_check_pressed(ord('V'))
{
    if global.item_V="Magic Rod"
    {
    scr_magic_rod(spr_links_magic_rod)
    exit
    }
    if global.item_V="Magic Wand"
    {
    scr_magic_rod(spr_links_magic_wand)
    exit
    }
    if global.item_V="Boomerang"
    {
    scr_boomerang()
    exit
    }
    if global.item_V="Magic Boomerang"
    {
    scr_magic_boomerang()
    exit
    }
    if global.item_V="Wooden Sword"
    {
    scr_sword(spr_links_sword_wooden,global.wooden_sword_damage,ord('V'),0,global.wooden_sword_force)
    exit
    }
    if global.item_V="Kokiri Sword"
    {
    scr_sword(spr_links_sword_kokiri,global.kokiri_sword_damage,ord('V'),global.kokiri_sword_light,global.kokiri_sword_force)
    exit
    }
    if global.item_V="Razor Sword"
    {
    scr_sword(spr_links_sword_razor,global.razor_sword_damage,ord('V'),global.razor_sword_light,global.razor_sword_force)
    exit
    }
    if global.item_V="Master Sword"
    {
    scr_sword(spr_links_sword_master,global.master_sword_damage,ord('V'),global.master_sword_light,global.master_sword_force)
    exit
    }
    if global.item_V="Bow"
    {
    scr_bow()
    exit
    }
    if global.item_V="Silver Bow"
    {
    scr_bow()
    exit
    }
    if global.item_V="Biggorons Sword"
    {
    scr_sword(spr_links_sword_biggorons,global.biggorons_sword_damage,ord('V'),global.biggorons_sword_light,global.biggorons_sword_force)
    exit
    }
    if global.item_V="Ocarina of Time"
    {
    scr_ocarina_of_time()
    exit
    }
    if global.item_V="Feather"
    {
    scr_feather()
    exit
    }
    if global.item_V="Bombs"
    {
    scr_bombs()
    exit
    }
    if global.item_V="Dins Essence"
    {
    scr_dins_essence()
    exit
    }
    if global.item_V="Nayrus Essence"
    {
    scr_nayrus_essence()
    exit
    }
    if global.item_V="Farores Essence"
    {
    scr_farores_essence()
    exit
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///deactivate items which are not equipped

/*

if global.item_V!="Dins Essence"
if global.item_C!="Dins Essence"
if global.item_X!="Dins Essence"
if global.item_Z!="Dins Essence"
{
global.essence_din_active=0
}

if global.item_V!="Nayrus Essence"
if global.item_C!="Nayrus Essence"
if global.item_X!="Nayrus Essence"
if global.item_Z!="Nayrus Essence"
{
global.essence_nayru_active=0
}

if global.item_V!="Farores Essence"
if global.item_C!="Farores Essence"
if global.item_X!="Farores Essence"
if global.item_Z!="Farores Essence"
{
global.essence_farore_active=0
}

*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///throw items

if keyboard_check_pressed(vk_space)
{
    scr_throw()
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MOVEMENT ON FOOT + picking up shit





//movement


check_up=0
check_down=0
check_left=0
check_right=0

if keyboard_check(vk_up)=1
check_up=1
if keyboard_check(vk_down)=1
check_down=1
if keyboard_check(vk_left)=1
check_left=1
if keyboard_check(vk_right)=1
check_right=1



if keyboard_check_pressed(vk_up)=1
{
    push_i=0
    slowed=max(slowed,1)
}
if keyboard_check_pressed(vk_down)=1
{
    push_i=0
    slowed=max(slowed,1)
}
if keyboard_check_pressed(vk_left)=1
{
    push_i=0
    slowed=max(slowed,1)
}
if keyboard_check_pressed(vk_right)=1
{
    push_i=0
    slowed=max(slowed,1)
}





var door_obj, chest_obj;

//finding object to lift when you press space
if sprite_index=spr_link_walking
or sprite_index=spr_link_pushing
{

if keyboard_check_pressed(vk_space)
{
    var col_line;
    col_line=collision_line(x+lengthdir_x(7,aim),y+lengthdir_y(7,aim),x+lengthdir_x(11,aim),y+lengthdir_y(11,aim),obj_bomb,-1,1)
    if col_line&gt;0
    {
        pushing_dir=aim
        
        sprite_index=spr_link_pulling
        hurt_sprite=spr_link_walking_hurt //because you can't lift and be hurt at one time. Getting hit will drop the object.
        lift_obj=col_line
        image_index_mod=0
        
        can_move=0
        
    }
    else
    if position_meeting(x+lengthdir_x(8,aim),y+lengthdir_y(8,aim),obj_locked_block_par)=1
    {
        
        door_obj=instance_position(x+lengthdir_x(8,aim),y+lengthdir_y(8,aim),obj_locked_block_par)
        with door_obj
        {
            if alarm[0]&lt;=0
            and global.dungeon_keys[dungeon]&gt;0
            {
                global.dungeon_keys[dungeon]-=1
                alarm[0]=alarm0
                
                if variable_local_exists("event_id")=1
                global.event[event_id]=1
            }
        }
    
    }
    else
    if position_meeting(x+lengthdir_x(8,aim),y+lengthdir_y(8,aim),obj_locked_door_par)=1
    {
        
        door_obj=instance_position(x+lengthdir_x(8,aim),y+lengthdir_y(8,aim),obj_locked_door_par)
        with door_obj
        {
            if alarm[0]&lt;=0
            and global.dungeon_keys[dungeon]&gt;0
            {
                global.dungeon_keys[dungeon]-=1
                draw_x=-8
                draw_y=-8
                alarm[0]=alarm0
                
                if variable_local_exists("event_id")=1
                global.event[event_id]=1
            }
        }
    
    }
    else
    if position_meeting(x+lengthdir_x(8,aim),y+lengthdir_y(8,aim),obj_chest_par)=1
    {
        if image_index=1
        {
            
            chest_obj=instance_position(x+lengthdir_x(8,aim),y+lengthdir_y(8,aim),obj_chest_par)
            if chest_obj.image_index=0
            {
                chest_obj.image_index=1
                obj=instance_create(x,y,chest_obj.contents)
                with chest_obj
                if variable_local_exists("event_id")
                {
                    global.event[event_id]=1
                }
            }
        }
    
    }
    else
    if position_meeting(x+lengthdir_x(8,aim),y+lengthdir_y(8,aim),obj_beamos)=1
    {
        pushing_dir=aim
        
        sprite_index=spr_link_pulling
        hurt_sprite=spr_link_walking_hurt //because you can't lift and be hurt at one time. Getting hit will drop the object.
        lift_obj=instance_position(x+lengthdir_x(8,aim),y+lengthdir_y(8,aim),obj_beamos)
        image_index_mod=0
        
        can_move=0
        
    }
    else
    if position_meeting(x+lengthdir_x(8,aim),y+lengthdir_y(8,aim),obj_barrier_par)=1
    {
        var ip;
        ip=instance_position(x+lengthdir_x(8,aim),y+lengthdir_y(8,aim),obj_barrier_par)
            
            pushing_dir=aim
            
            sprite_index=spr_link_pulling
            hurt_sprite=spr_link_walking_hurt //because you can't lift and be hurt at one time. Getting hit will drop the object.
            lift_obj=ip
            image_index_mod=0
            
            can_move=0
    }
}

}




////////////////////////////////////////////////////////////////////////

if global.show_inventory=1 exit
if dead=1 exit
if cliff_jump=1 exit

////////////////////////////////////////////////////////////////////////




//lifting
if sprite_index=spr_link_pulling
{

    if keyboard_check(vk_space)=0
    if alarm[9]&lt;=0
    {
        sprite_index=spr_link_walking
        can_move=1
        alarm[8]=-1
        exit
    }
    
    
    if pushing_dir=90
    if check_down=0
    {
    alarm[8]=-1
    image_index_mod=0
    }
    if pushing_dir=0
    if check_left=0
    {
    alarm[8]=-1
    image_index_mod=0
    }
    if pushing_dir=180
    if check_right=0
    {
    alarm[8]=-1
    image_index_mod=0
    }
    if pushing_dir=270
    if check_up=0
    {
    alarm[8]=-1
    image_index_mod=0
    }
    
    
    if alarm[8]&lt;=0
    {

        if pushing_dir=90
        if check_down=1
        {
        alarm[8]=max(3,lift_obj.weight*global.link_lift_time)
        image_index_mod=1
        }
        
        if pushing_dir=0
        if check_left=1
        {
        alarm[8]=max(3,lift_obj.weight*global.link_lift_time)
        image_index_mod=1
        }
        
        if pushing_dir=180
        if check_right=1
        {
        alarm[8]=max(3,lift_obj.weight*global.link_lift_time)
        image_index_mod=1
        }
        
        if pushing_dir=270
        if check_up=1
        {
        alarm[8]=max(3,lift_obj.weight*global.link_lift_time)
        image_index_mod=1
        }
    
    }
    
}
//






////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

if stunned&gt;0 exit
if can_move=0 exit
if held&gt;0 exit
if sprite_index=spr_link_shooting exit


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////








//

var speed_mod;

speed_mod=0
if global.link_speed_boost&gt;0
{
speed_mod+=global.farore_speed_mod
}
if instance_exists(obj_links_sword)=1
{
speed_mod+=global.link_sword_charge_speed_mod
}

//









////////////////////////////////////////////////////////////////



if instance_exists(obj_boomerang)
{

    if obj_boomerang.returning=0
    if obj_boomerang.magic=1
    if jump=0
    {
    
        if keyboard_check(ord('V'))
        if global.item_V="Magic Boomerang"
        exit
        if keyboard_check(ord('C'))
        if global.item_C="Magic Boomerang"
        exit
        if keyboard_check(ord('X'))
        if global.item_X="Magic Boomerang"
        exit
        if keyboard_check(ord('Z'))
        if global.item_Z="Magic Boomerang"
        exit
        
    }
}




////////////////////////////////////////////////////////////////










//

var change_index;

change_index=!instance_exists(obj_links_sword)
    
//





var gol;
gol=1

with obj_links_sword
if stab&gt;0
gol=0


if gol=1
if check_up=1
or check_down=1
or check_right=1
or check_left=1
or speed_mod&gt;0
{
image_index_mod+=image_index_mod_change
if image_index_mod&gt;1
image_index_mod-=1
}



//determine which way you're aiming


    if check_up=1
    aim=90
    if check_down=1
    aim=270
    if check_left=1
    aim=180
    if check_right=1
    aim=0
    
    if check_up=1
    if check_left=1
    aim=135
    if check_up=1
    if check_right=1
    aim=45
    if check_down=1
    if check_left=1
    aim=225
    if check_down=1
    if check_right=1
    aim=315






//pushing debugging

    
if sprite_index=spr_link_pushing
{
sprite_index=spr_link_walking
hurt_sprite=spr_link_walking_hurt
}













///MOVING!!





    var xe, ye, move_speed, times;
    
    if jump=0
    move_speed=global.link_speed
    else
    {
        move_speed=global.link_jump_speed_control
        if jump_dir_real=-1
        move_speed=global.link_jump_stop_control
    }
    
    times=  (move_speed+speed_mod)   /   ((slowed&gt;0)+1)
    
    if aim mod 90!=0
    {
        times=times*global.link_diagonal_speed_mod
    }
    
    xe=times mod 1
    ye=times mod 1
    times=floor(times)


    
    
    
    
    var go;
    go=1
    

if check_up=1
{

    if change_index=1
    if jump=0
    if check_right=0
    if check_left=0
    image_index=1
    
    
    repeat(times)
    {
    /*
        if position_meeting(x,y-4,obj_moving_platform_td_par)=1
        and position_meeting(x,y-6,obj_moving_platform_td_par)=0
        and position_meeting(x,y-2,obj_moving_platform_td_par)=0
        go=0
        
        if check_left=1
        or check_right=1
        go=1
        */
        
        if go=1
        if place_meeting(x,y-1,obj_barrier_par)=0
        {
        y-=1
        }
        
        else
        if jump=0
        if instance_exists(obj_links_sword)=0
        {
        
            //pushing
            if sprite_index!=spr_link_holding
            if position_meeting(x,y-8,obj_barrier_par)=1
            if instance_position(x,y-8,obj_barrier_par).falling=0
            {
        
                
                
                
                var go, obj, no_more_push;
                
                go=0
                obj=instance_position(x,y-8,obj_barrier_par)
                no_more_push=0
                
                
                if obj.can_push!="cliff_s"
                {
                
                    sprite_index=spr_link_pushing
                    hurt_sprite=spr_link_pushing_hurt
                    pushing_dir=90
                }
                else
                cliffing=1
                
                
                    switch (obj.can_push)
                    {
                        case "up":
                        {
                            go=1
                            no_more_push=1
                            break
                        }
                        case "anyonce":
                        {
                            go=1
                            no_more_push=1
                            break
                        }
                        case "any":
                        {
                            go=1
                            break
                        }
                        case "key":
                        {
                            go=1
                            break
                        }
                        case "cliff_s":
                        {
                            go=1
                            break
                        }
                        
                    }
                    
                    
                        if go=1
                        with obj
                        {
                            if can_push="cliff_s"
                            {
                                if other.check_left=0
                                if other.check_right=0
                                if position_meeting(x+8,y-8,obj_barrier_par)=0
                                if other.push_i&gt;global.push_block_time*1/2
                                {
                                    with other
                                    {
                                        jump=1
                                        cliff_jump=1
                                        z_change=5
                                        jump_dir_real=90
                                        jump_speed=global.cliff_jump_speed
                                        imagespeed=0
                                        imagexflip=1
                                        imageyflip=1
                                        imageangle=0
                                        imagespin=0
                                        alarm[6]=alarm6
                                        image_index_revert=image_index
                                        sprite_index=spr_link_rolling_vertical
                                        hurt_sprite=spr_link_rolling_vertical_hurt
                                        imagespeed=1
                                        jump_dir=image_index*90
                                        burned=0
                                        image_index=0
                                        
                                    }
                                }
                            }
                            else
                            if can_push="key"
                            {
                                if other.push_i&gt;global.push_block_time*2/3
                                {
                                    if alarm[0]&lt;=0
                                    if global.dungeon_keys[dungeon]&gt;0
                                    {
                                        global.dungeon_keys[dungeon]-=1
                                        draw_x=-8
                                        draw_y=-8
                                        alarm[0]=alarm0
                                        
                                        if variable_local_exists("event_id")=1
                                        global.event[event_id]=1
                                    }
                                }
                            }
                            else
                            {
                            
                                if other.push_i&gt;global.push_block_time
                                {
                                    if position_meeting(x,y-8,obj_barrier_par)=0
                                    if position_meeting(x+8,y-8,obj_beamos)=0
                                    if position_meeting(x+8,y-8,obj_tentacle)=0
                                    {
                                        if position_meeting(x+8,y-8,obj_enemy_barrier)=0
                                        {
                                            pushing=1
                                            pushing_dir=other.pushing_dir
                                            
                                            if no_more_push=1 can_push="no"
                                                if variable_local_exists("event_id")=1
                                                {
                                                    
                                                if variable_local_exists("event_not_pushing")=0
                                                {
                                                    global.event[event_id]=1
                                                }
                                                }
                                        }
                                    }
                                }
                            }
                        }
                
                    
                
                
                
                
        
            }
            
        }
    
    
        if position_meeting(x,y,obj_hole_par)=0
        or position_meeting(x,y,obj_moving_platform_td_par)=1
        {
            //this helps make control easier by moving Link around obsticles he's near the edge of
            if position_meeting(x,y-8,obj_barrier_par)&lt;=0
            if position_meeting(x-5,y-8,obj_barrier_par)&lt;=0
            if place_meeting(x-1,y,obj_barrier_par)=0
            if check_right=0
            if check_left=0
            {
                x-=1
            }
            if position_meeting(x,y-8,obj_barrier_par)&lt;=0
            if position_meeting(x+5,y-8,obj_barrier_par)&lt;=0
            if place_meeting(x+1,y,obj_barrier_par)=0
            if check_right=0
            if check_left=0
            {
                x+=1
            }
        }
    
    }
    
    
        {
            if place_meeting(x,y-ye,obj_barrier_par)=0
            {
                y-=ye
            }
        }

}






go=1

if check_down=1
if check_up=0
{

    
    if change_index=1
    if jump=0
    if check_right=0
    if check_left=0
    image_index=3
    
    

    repeat(times)
    {
    /*
        if position_meeting(x,y-4,obj_moving_platform_td_par)=1
        and position_meeting(x,y-6,obj_moving_platform_td_par)=0
        and position_meeting(x,y-2,obj_moving_platform_td_par)=0
        go=0
        
        if check_left=1
        or check_right=1
        go=1
        */
        
        if go=1
        if place_meeting(x,y+1,obj_barrier_par)=0
        {
        y+=1
        }
            
        else
        if jump=0
        if instance_exists(obj_links_sword)=0
        {
        
            if sprite_index!=spr_link_holding
            if position_meeting(x,y+8,obj_barrier_par)=1
            if instance_position(x,y+8,obj_barrier_par).falling=0
            {
        
                
                var go, obj, no_more_push;
                
                go=0
                obj=instance_position(x,y+8,obj_barrier_par)
                no_more_push=0
                
                
                if obj.can_push!="cliff_n"
                {
                
                    sprite_index=spr_link_pushing
                    hurt_sprite=spr_link_pushing_hurt
                    pushing_dir=270
                }
                else
                cliffing=1
                
                    switch (obj.can_push)
                    {
                        case "down":
                        {
                            go=1
                            no_more_push=1
                            break
                        }
                        case "anyonce":
                        {
                            go=1
                            no_more_push=1
                            break
                        }
                        case "any":
                        {
                            go=1
                            break
                        }
                        case "key":
                        {
                            go=1
                            break
                        }
                        case "cliff_n":
                        {
                            go=1
                            break
                        }
                        
                    }
                    
                    
                        if go=1
                        with obj
                        {
                            if can_push="cliff_n"
                            {
                                if other.check_left=0
                                if other.check_right=0
                                if position_meeting(x+8,y+24,obj_barrier_par)=0
                                if other.push_i&gt;global.push_block_time*1/2
                                {
                                    with other
                                    {
                                        jump=1
                                        cliff_jump=1
                                        z_change=5
                                        jump_dir_real=270
                                        jump_speed=global.cliff_jump_speed
                                        imagespeed=0
                                        imagexflip=1
                                        imageyflip=1
                                        imageangle=0
                                        imagespin=0
                                        alarm[6]=alarm6
                                        image_index_revert=image_index
                                        sprite_index=spr_link_rolling_vertical
                                        hurt_sprite=spr_link_rolling_vertical_hurt
                                        imageyflip=-1
                                        imagespeed=1
                                        jump_dir=image_index*90
                                        burned=0
                                        image_index=0
                                    }
                                }
                            }
                            else
                            if can_push="key"
                            {
                                if other.push_i&gt;global.push_block_time*2/3
                                {
                                    if alarm[0]&lt;=0
                                    if global.dungeon_keys[dungeon]&gt;0
                                    {
                                        global.dungeon_keys[dungeon]-=1
                                        draw_x=-8
                                        draw_y=-8
                                        alarm[0]=alarm0
                                        
                                        if variable_local_exists("event_id")=1
                                        global.event[event_id]=1
                                    }
                                }
                            }
                            else
                            {
                            
                                if other.push_i&gt;global.push_block_time
                                {
                                    if position_meeting(x,y+8+16,obj_barrier_par)=0
                                    if position_meeting(x+8,y+8+16,obj_beamos)=0
                                    if position_meeting(x+8,y+8+16,obj_tentacle)=0
                                    {
                                        if position_meeting(x+8,y+8+16,obj_enemy_barrier)=0
                                        {
                                            pushing=1
                                            pushing_dir=other.pushing_dir
                                            
                                            if no_more_push=1 can_push="no"
                                                if variable_local_exists("event_id")=1
                                                {
                                                    
                                                if variable_local_exists("event_not_pushing")=0
                                                {
                                                    global.event[event_id]=1
                                                }
                                                }
                                        }
                                    }
                                }
                            }
                        }
                
                    
                
                
                
        
            }
        
        }
        
    
    
        if position_meeting(x,y,obj_hole_par)=0
        or position_meeting(x,y,obj_moving_platform_td_par)=1
        {
            //this helps make control easier by moving Link around obsticles he's near the edge of
            if position_meeting(x,y+8,obj_barrier_par)&lt;=0
            if position_meeting(x-5,y+8,obj_barrier_par)&lt;=0
            if place_meeting(x-1,y,obj_barrier_par)=0
            if check_right=0
            if check_left=0
            {
                x-=1
            }
            if position_meeting(x,y+8,obj_barrier_par)&lt;=0
            if position_meeting(x+5,y+8,obj_barrier_par)&lt;=0
            if place_meeting(x+1,y,obj_barrier_par)=0
            if check_right=0
            if check_left=0
            {
                x+=1
            }
        }
    
    }
    
    
        {
            if place_meeting(x,y+ye,obj_barrier_par)=0
            {
                y+=ye
            }
        }
}








go=1

if check_left=1
{

    
    if change_index=1
    if jump=0
    if check_up=0
    if check_down=0
    image_index=2
    
    

    repeat(times)
    {
    /*
        if position_meeting(x,y-4,obj_moving_platform_td_par)=1
        and position_meeting(x,y-6,obj_moving_platform_td_par)=0
        and position_meeting(x,y-2,obj_moving_platform_td_par)=0
        go=0
        
        if check_left=1
        or check_right=1
        go=1
        */
        
        
        if go=1
        if place_meeting(x-1,y,obj_barrier_par)=0
        {
        x-=1
        }
            
        else
        if jump=0
        if instance_exists(obj_links_sword)=0
        {
        
            if sprite_index!=spr_link_holding
            if position_meeting(x-8,y,obj_barrier_par)=1
            if instance_position(x-8,y,obj_barrier_par).falling=0
            {
        
                
                var go, obj, no_more_push;
                
                go=0
                obj=instance_position(x-8,y,obj_barrier_par)
                no_more_push=0
                
                
                if obj.can_push!="cliff_e"
                {
                
                    sprite_index=spr_link_pushing
                    hurt_sprite=spr_link_pushing_hurt
                    pushing_dir=180
                }
                else
                cliffing=1
                
                
                    switch (obj.can_push)
                    {
                        case "left":
                        {
                            go=1
                            no_more_push=1
                            break
                        }
                        case "anyonce":
                        {
                            go=1
                            no_more_push=1
                            break
                        }
                        case "any":
                        {
                            go=1
                            break
                        }
                        case "key":
                        {
                            go=1
                            break
                        }
                        case "cliff_e":
                        {
                            go=1
                            break
                        }
                        
                    }
                    
                    
                        if go=1
                        with obj
                        {
                            if can_push="cliff_e"
                            {
                                if other.check_up=0
                                if other.check_down=0
                                if position_meeting(x-8,y+8,obj_barrier_par)=0
                                if other.push_i&gt;global.push_block_time*1/2
                                {
                                    with other
                                    {
                                        jump=1
                                        cliff_jump=1
                                        z_change=5
                                        jump_dir_real=180
                                        jump_speed=global.cliff_jump_speed
                                        imagespeed=0
                                        imagexflip=1
                                        imageyflip=1
                                        imageangle=0
                                        imagespin=0
                                        alarm[6]=alarm6
                                        image_index_revert=image_index
                                        sprite_index=spr_link_rolling_horizontal
                                        hurt_sprite=spr_link_rolling_horizontal_hurt
                                        imagespin=90
                                        imagexflip=-1
                                        jump_dir=image_index*90
                                        burned=0
                                        image_index=0
                                    }
                                }
                            }
                            else
                            if can_push="key"
                            {
                                if other.push_i&gt;global.push_block_time*2/3
                                {
                                    if alarm[0]&lt;=0
                                    if global.dungeon_keys[dungeon]&gt;0
                                    {
                                        global.dungeon_keys[dungeon]-=1
                                        draw_x=-8
                                        draw_y=-8
                                        alarm[0]=alarm0
                                        
                                        if variable_local_exists("event_id")=1
                                        global.event[event_id]=1
                                    }
                                }
                            }
                            else
                            {
                            
                                if other.push_i&gt;global.push_block_time
                                {
                                    if position_meeting(x-8,y,obj_barrier_par)=0
                                    if position_meeting(x-8,y+8,obj_beamos)=0
                                    if position_meeting(x-8,y+8,obj_tentacle)=0
                                    {
                                        if position_meeting(x-8,y+8,obj_enemy_barrier)=0
                                        {
                                            pushing=1
                                            pushing_dir=other.pushing_dir
                                            
                                            if no_more_push=1 can_push="no"
                                                if variable_local_exists("event_id")=1
                                                {
                                                    
                                                if variable_local_exists("event_not_pushing")=0
                                                {
                                                    global.event[event_id]=1
                                                }
                                                }
                                        }
                                    }
                                }
                            }
                        }
                
                    
                
                
                
        
            }
        
        }
    
    
        if position_meeting(x,y,obj_hole_par)=0
        or position_meeting(x,y,obj_moving_platform_td_par)=1
        {
            //this helps make control easier by moving Link around obsticles he's near the edge of
            if position_meeting(x-8,y,obj_barrier_par)&lt;=0
            if position_meeting(x-8,y-4,obj_barrier_par)&lt;=0
            if place_meeting(x,y-1,obj_barrier_par)=0
            if check_up=0
            if check_down=0
            {
                y-=1
            }
            if position_meeting(x-8,y+5,obj_barrier_par)&lt;=0
            if position_meeting(x-8,y+5+4,obj_barrier_par)&lt;=0
            if place_meeting(x,y+1,obj_barrier_par)=0
            if check_up=0
            if check_down=0
            {
                y+=1
            }
        }
    
    }
    
    
        {
            if place_meeting(x-xe,y,obj_barrier_par)=0
            {
                x-=xe
            }
        }

}






go=1

if check_right=1
if check_left=0
{


    if change_index=1
    if jump=0
    if check_up=0
    if check_down=0
    image_index=0
    
    

    repeat(times)
    {
    /*
        if position_meeting(x,y-4,obj_moving_platform_td_par)=1
        and position_meeting(x,y-6,obj_moving_platform_td_par)=0
        and position_meeting(x,y-2,obj_moving_platform_td_par)=0
        go=0
        
        if check_left=1
        or check_right=1
        go=1
        */
        
        if go=1
        if place_meeting(x+1,y,obj_barrier_par)=0
        {
        x+=1
        }
            
        else
        if jump=0
        if instance_exists(obj_links_sword)=0
        {
        
            if sprite_index!=spr_link_holding
            if position_meeting(x+8,y,obj_barrier_par)=1
            if instance_position(x+8,y,obj_barrier_par).falling=0
            {
        
                
                var go, obj, no_more_push;
                
                go=0
                obj=instance_position(x+8,y,obj_barrier_par)
                no_more_push=0
                
                
                if obj.can_push!="cliff_w"
                {
                
                    sprite_index=spr_link_pushing
                    hurt_sprite=spr_link_pushing_hurt
                    pushing_dir=0
                }
                else
                cliffing=1
                
                    switch (obj.can_push)
                    {
                        case "right":
                        {
                            go=1
                            no_more_push=1
                            break
                        }
                        case "anyonce":
                        {
                            go=1
                            no_more_push=1
                            break
                        }
                        case "any":
                        {
                            go=1
                            break
                        }
                        case "key":
                        {
                            go=1
                            break
                        }
                        case "cliff_w":
                        {
                            go=1
                            break
                        }
                        
                    }
                    
                    
                        if go=1
                        with obj
                        {
                            if can_push="cliff_w"
                            {
                                if other.check_up=0
                                if other.check_down=0
                                if position_meeting(x+24,y+8,obj_barrier_par)=0
                                if other.push_i&gt;global.push_block_time*1/2
                                {
                                    with other
                                    {
                                        jump=1
                                        cliff_jump=1
                                        z_change=5
                                        jump_dir_real=0
                                        jump_speed=global.cliff_jump_speed
                                        imagespeed=0
                                        imagexflip=1
                                        imageyflip=1
                                        imageangle=0
                                        imagespin=0
                                        alarm[6]=alarm6
                                        image_index_revert=image_index
                                        sprite_index=spr_link_rolling_horizontal
                                        hurt_sprite=spr_link_rolling_horizontal_hurt
                                        imagespin=-90
                                        jump_dir=image_index*90
                                        burned=0
                                        image_index=0
                                    }
                                }
                            }
                            else
                            if can_push="key"
                            {
                                if other.push_i&gt;global.push_block_time*2/3
                                {
                                    if alarm[0]&lt;=0
                                    if global.dungeon_keys[dungeon]&gt;0
                                    {
                                        global.dungeon_keys[dungeon]-=1
                                        draw_x=-8
                                        draw_y=-8
                                        alarm[0]=alarm0
                                        
                                        if variable_local_exists("event_id")=1
                                        global.event[event_id]=1
                                    }
                                }
                            }
                            else
                            {
                            
                                if other.push_i&gt;global.push_block_time
                                {
                                    if position_meeting(x+8+16,y,obj_barrier_par)=0
                                    if position_meeting(x+8+16,y+8,obj_beamos)=0
                                    if position_meeting(x+8+16,y+8,obj_tentacle)=0
                                    {
                                        if position_meeting(x+8+16,y+8,obj_enemy_barrier)=0
                                        {
                                            pushing=1
                                            pushing_dir=other.pushing_dir
                                            
                                            if no_more_push=1 can_push="no"
                                                if variable_local_exists("event_id")=1
                                                {
                                                    
                                                if variable_local_exists("event_not_pushing")=0
                                                {
                                                    global.event[event_id]=1
                                                }
                                                }
                                        }
                                    }
                                }
                            }
                        }
                
                    
                
                
                
        
            }
        
        }
    
    
        if position_meeting(x,y,obj_hole_par)=0
        or position_meeting(x,y,obj_moving_platform_td_par)=1
        {
            //this helps make control easier by moving Link around obsticles he's near the edge of
            if position_meeting(x+8,y,obj_barrier_par)&lt;=0
            if position_meeting(x+8,y-4,obj_barrier_par)&lt;=0
            if place_meeting(x,y-1,obj_barrier_par)=0
            if check_up=0
            if check_down=0
            {
                y-=1
            }
            if position_meeting(x+8,y+5,obj_barrier_par)&lt;=0
            if position_meeting(x+8,y+5+4,obj_barrier_par)&lt;=0
            if place_meeting(x,y+1,obj_barrier_par)=0
            if check_up=0
            if check_down=0
            {
                y+=1
            }
        }
    
    }
    
    
        {
            if place_meeting(x+xe,y,obj_barrier_par)=0
            {
                x+=xe
            }
        }

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///jumping

if global.show_inventory=1 exit


if jump=1
{
    if cliff_jump=0
    {
        if stunned&lt;=0
        move_jumping(jumping_speed,aim,global.link_jump_gravity)
        else
        move_jumping(jumping_speed,aim,global.link_jump_gravity)
    }
    else
    {
        move_jumping_cliff(jumping_speed,aim,global.link_jump_gravity)
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MOVEMENT ON FOOT WHILE AIMING BOW




//check_up etc. is already set in MOVEMENT ON FOOT









////////////////////////////////////////////////////////////////


if can_move=0 exit
if sprite_index!=spr_link_shooting exit
if global.show_inventory=1 exit
if held&gt;0 exit


if dead=1
exit


if instance_exists(obj_boomerang)
{
    if keyboard_check(ord('V'))
    if global.item_V="Magic Boomerang"
    exit
    if keyboard_check(ord('C'))
    if global.item_C="Magic Boomerang"
    exit
    if keyboard_check(ord('X'))
    if global.item_X="Magic Boomerang"
    exit
    if keyboard_check(ord('Z'))
    if global.item_Z="Magic Boomerang"
    exit
}




////////////////////////////////////////////////////////////////










//

//speed mod is additional speed

var speed_mod;

speed_mod=0
if global.link_speed_boost&gt;0
{
speed_mod=global.farore_speed_mod
}


    var xe, ye, move_speed;
    xe=global.link_speed mod 1
    ye=global.link_speed mod 1
    

//





if notched=1
{
    //this alarm check is to make sure the animation doesn't happen if you just fired the bow.
    if alarm[4]&lt;=0
    {
    
    if check_up=1
    or check_down=1
    or check_right=1
    or check_left=1
    or speed_mod&gt;0
    {
    image_index_mod+=.25
    if round(image_index_mod)&gt;=3
    image_index_mod-=2
    }
    
    }
    else
    image_index_mod=3
}






if check_up=1
{

    
    
    repeat((floor(global.link_speed)+speed_mod)/((slowed&gt;0)+1))
    {
    
        if place_free(x,y-1)=1
        or (place_meeting(x,y-1,obj_enemy_barrier)=1
        and place_meeting(x,y-1,obj_barrier_par)=0)
        {
        y-=1
        }
        
        //this helps make control easier by moving Link around obsticles he's near the edge of
        if position_meeting(x,y-8,obj_barrier_par)&lt;=0
        if position_meeting(x-8,y-8,obj_barrier_par)&lt;=0
        if place_meeting(x-1,y,obj_barrier_par)=0
        if check_right=0
        if check_left=0
        {
            x-=1
        }
        if position_meeting(x,y-8,obj_barrier_par)&lt;=0
        if position_meeting(x+8,y-8,obj_barrier_par)&lt;=0
        if place_meeting(x+1,y,obj_barrier_par)=0
        if check_right=0
        if check_left=0
        {
            x+=1
        }
    
    }
    
    
        if check_left=0
        and check_right=0
        {
            if place_free(x,y-ye)
            {
                y-=ye
            }
        }


}


if check_down=1
if check_up=0
{

    
    
    repeat((floor(global.link_speed)+speed_mod)/((slowed&gt;0)+1))
    {
    
        if place_free(x,y+1)=1
        or (place_meeting(x,y+1,obj_enemy_barrier)=1
        and place_meeting(x,y+1,obj_barrier_par)=0)
        {
        y+=1
        }
        
        //this helps make control easier by moving Link around obsticles he's near the edge of
        if position_meeting(x,y+8,obj_barrier_par)&lt;=0
        if position_meeting(x-8,y+8,obj_barrier_par)&lt;=0
        if place_meeting(x-1,y,obj_barrier_par)=0
        if check_right=0
        if check_left=0
        {
            x-=1
        }
        if position_meeting(x,y+8,obj_barrier_par)&lt;=0
        if position_meeting(x+8,y+8,obj_barrier_par)&lt;=0
        if place_meeting(x+1,y,obj_barrier_par)=0
        if check_right=0
        if check_left=0
        {
            x+=1
        }
    
    }
    
    
        if check_left=0
        and check_right=0
        {
            if place_free(x,y+ye)
            {
                y+=ye
            }
        }


}



if check_left=1
{

    
    
    repeat((floor(global.link_speed)+speed_mod)/((slowed&gt;0)+1))
    {
    
        if place_free(x-1,y)=1
        or (place_meeting(x-1,y,obj_enemy_barrier)=1
        and place_meeting(x-1,y,obj_barrier_par)=0)
        {
        x-=1
        }
        
        //this helps make control easier by moving Link around obsticles he's near the edge of
        if position_meeting(x-8,y,obj_barrier_par)&lt;=0
        if position_meeting(x-8,y-8,obj_barrier_par)&lt;=0
        if place_meeting(x,y-1,obj_barrier_par)=0
        if check_up=0
        if check_down=0
        {
            y-=1
        }
        if position_meeting(x-8,y,obj_barrier_par)&lt;=0
        if position_meeting(x-8,y+8,obj_barrier_par)&lt;=0
        if place_meeting(x,y+1,obj_barrier_par)=0
        if check_up=0
        if check_down=0
        {
            y+=1
        }
    
    }

    
    
        if check_up=0
        and check_down=0
        {
            if place_free(x-xe,y)
            {
                x-=xe
            }
        }

}


if check_right=1
if check_left=0
{
    
    
    repeat((floor(global.link_speed)+speed_mod)/((slowed&gt;0)+1))
    {
    
        if place_free(x+1,y)=1
        or (place_meeting(x+1,y,obj_enemy_barrier)=1
        and place_meeting(x+1,y,obj_barrier_par)=0)
        {
        x+=1
        }
        
        //this helps make control easier by moving Link around obsticles he's near the edge of
        if position_meeting(x+8,y,obj_barrier_par)&lt;=0
        if position_meeting(x+8,y-8,obj_barrier_par)&lt;=0
        if place_meeting(x,y-1,obj_barrier_par)=0
        if check_up=0
        if check_down=0
        {
            y-=1
        }
        if position_meeting(x+8,y,obj_barrier_par)&lt;=0
        if position_meeting(x+8,y+8,obj_barrier_par)&lt;=0
        if place_meeting(x,y+1,obj_barrier_par)=0
        if check_up=0
        if check_down=0
        {
            y+=1
        }
    
    }
    
    
        if check_up=0
        and check_down=0
        {
            if place_free(x+xe,y)
            {
                x+=xe
            }
        }


}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MOVEMENT OF BOOMERANG



/////////////////////////////////////////////////////

if instance_exists(obj_boomerang)=0 exit

if global.show_inventory=1 exit
if stunned&gt;0 exit
if sprite_index=spr_link_knocked_down exit
if jump=1 exit

/////////////////////////////////////////////////////




var go, xto, yto;
go=0



if keyboard_check(ord('V'))
if global.item_V="Magic Boomerang"
go=1
if keyboard_check(ord('C'))
if global.item_C="Magic Boomerang"
go=1
if keyboard_check(ord('X'))
if global.item_X="Magic Boomerang"
go=1
if keyboard_check(ord('Z'))
if global.item_Z="Magic Boomerang"
go=1


if obj_boomerang.returning=1
go=0



/////////////////////////////////////////////////////////////////

if go=0
{
    if obj_boomerang.released=1
    if obj_boomerang.extended=1
    obj_boomerang.returning=1
    
    with obj_boomerang released=1
    
    exit
}

////////////////////////////////////////////////////////////////




with obj_boomerang
{
    if other.check_left=1
    or other.check_right=1
    or other.check_up=1
    or other.check_down=1
    motion_add(point_direction(x,y,x-other.check_left+other.check_right,y-other.check_up+other.check_down),global.magic_boomerang_move_mod)
    speed=global.link_boomerang_speed
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GETTING OUT OF HOLD

if global.show_inventory=1 exit


if held&gt;0

{

    if keyboard_check_pressed(vk_anykey)
    {
    
        with holder
        {
        life-=1/holding_defense
        hit=global.link_sword_hit
        }
    
    }

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GETTING OUT OF BEING LIKELIKED

if global.show_inventory=1 exit


if likeliked=1

{

//debug patch for likelikes not always making Link stop moving for some reason
can_move=0

    if keyboard_check_pressed(vk_anykey)
    {

        with obj_likelike
        {
        if likeliking=1
        {
        life-=1/likeliking_defense
        if life&gt;0
        hit=global.link_sword_hit
        }
        }
        
        with obj_likelike_fire
        {
        if likeliking=1
        {
        life-=1/likeliking_defense
        if life&gt;0
        hit=global.link_sword_hit
        }
        }
    
    }

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GETTING OUT OF BEING FROZEN

if global.show_inventory=1 exit


if frozen&gt;0

{

    if keyboard_check_pressed(vk_anykey)
    {

        frozen-=global.link_break_free_of_ice_power*global.freeze_time
        stunned-=global.link_break_free_of_ice_power*global.freeze_time
    
    }

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///COLLISIONS WITH ENEMY





if likeliked=1
exit

if dead=1
exit

if shifting_view=1
exit




if z&gt;global.link_aerial_dodge
y-=z

with obj_enemy_par
{

    var go;
    go=0
    
    if abs(z-obj_link.z)&lt;global.link_aerial_dodge
    go=1
    if z&gt;obj_link.z
    if z&lt;=obj_link.z+12
    go=1
    if aerial_attack=1
    go=1
    
    
    if stunned&gt;0
    if stun_attack=0
    go=0
    
    
    
    if go=1
    {
        
        if visible=1
        if dead=0
        if collision_rectangle(x-sprite_left,y-sprite_up-z,x+sprite_right,y+sprite_down-z,obj_link,1,0)&gt;0
        
        {
        
        
        //effects Link first, then monster
        
        
        var temp_id;
        
        temp_id=id
        
        
        
            with obj_link
            {
            
            
                var can_be_hit;
                can_be_hit=0
            
                if hit&lt;=0
                or other.always_hits
                can_be_hit=1
                
                if can_be_hit=1
                {
                
                    
                    if temp_id.slow&gt;0
                    {
                        slowed=temp_id.slow
                    }
                    if temp_id.stun&gt;0
                    {
                        stunned=temp_id.stun
                    }
                        
                        if hit&lt;=0
                        {
                            if temp_id.fire&gt;0
                            {
                                hit=global.link_hit
                                global.link_life-=temp_id.fire*global.link_res_fire
                                burned=temp_id.fire*global.link_res_fire*global.burn_time
                            }
                            if temp_id.ice&gt;0
                            {
                                hit=global.link_hit
                                global.link_life-=temp_id.ice*global.link_res_ice_damage
                                frozen=temp_id.ice*global.link_res_ice*global.freeze_time
                                stunned=frozen
                            }
                            if temp_id.shock&gt;0
                            {
                                global.link_life-=temp_id.shock*global.link_res_lightning
                                shocked=temp_id.shock*global.link_res_lightning*global.shock_time
                                stunned=shocked
                                hit=shocked
                            }
                        
                            if temp_id.damage&gt;0
                            {
                                hit=global.link_hit
                                if temp_id.damage&gt;=global.massive_damage
                                hit=global.link_hit*2
                                
                                global.link_life-=temp_id.damage*global.link_res_physical
                            }
                            
                                if temp_id.shock&gt;0
                                hit=shocked
                        }
                        
                    
                    
                    if temp_id.hold=1
                    if temp_id.can_hold=1
                    {
                    obj_link.held=1
                    
                    obj_link.x=temp_id.x+temp_id.hold_x
                    obj_link.y=temp_id.y+temp_id.hold_y
                    
                    holder=temp_id
                    temp_id.image_speed_manual=temp_id.image_speed_attack
                    }
                    
                    
                    temp_dir=point_direction(temp_id.x+temp_id.offset_x,temp_id.y+temp_id.offset_y-temp_id.z,x,y)
        
                        //pushes Link
                        if held&lt;=0
                        if temp_id.hinox=0
                        {
                            knockback=temp_id.force/mass*global.knockback_force
                            knockback_dir=temp_dir
                            if other.move_out_on_collision
                            {
                                if place_free(x+lengthdir_x(1,temp_dir),y)
                                {
                                    x+=lengthdir_x(1,temp_dir)
                                }
                                if place_free(x,y+lengthdir_y(1,temp_dir))
                                {
                                    y+=lengthdir_y(1,temp_dir)
                                }
                            }
                        }
                    
                    
                    if temp_id.hinox=1
                    if temp_id.frozen&lt;=0
                    if temp_id.grabbed_link=0
                    {
                        z=0
                        z_change=0
                        jump=0
                        
                        notched=0
                        hit=global.link_hit
                        knockback=0
                        sprite_index=spr_link_knocked_down
                        can_move=0
                        
                        x=temp_id.x-7
                        y=temp_id.y+4
                        
                        
                        temp_id.knockback=0
                        temp_id.grabbed_link=1
                        temp_id.grabbing_link=1
                        temp_id.alarm[8]=temp_id.alarm8
                        
                        temp_id.image_index=0
                        
                        temp_id.alarm[0]=-1
                        temp_id.alarm[1]=-1
                        temp_id.alarm[2]=-1
                        temp_id.alarm[3]=-1
                        temp_id.alarm[4]=-1
                        temp_id.moving_speed=0
                        temp_id.sprint=0
                    }
                    
                    
                    
                    //this is to make the sword, rod follow you so it's not separate from you when you are knocked around
                    var x_old, y_old;
                    x_old=x
                    y_old=y
                    
                    //this is to make the sword follow you so it's not separate from you when you are knocked around
                    with obj_links_sword
                    {
                    
                        x+=(obj_link.x-x_old)
                        y+=(obj_link.y-y_old)
                    
                    }
                    
                    //this is to make the rod follow you so it's not separate from you when you are knocked around
                    with obj_links_magic_rod
                    {
                    
                        x+=(obj_link.x-x_old)
                        y+=(obj_link.y-y_old)
                    
                    }
                        
                }
                else
///////////////////////////////////////////////////////////////////////////////
                exit
///////////////////////////////////////////////////////////////////////////////
                
                
            
                
            
            
            
                with temp_id
                {
            
                    //KEEPING THEM FROM OVERLAPPING
            
            
            
                    if stunned&gt;0 exit
                    if dead=1 exit
                    if avoid_link_collision=1
                    {
                
                
                
                    var temp1, temp2;
                
                    temp1=lengthdir_x(speed,point_direction(temp_id.x,temp_id.y,x,y))
                    temp2=lengthdir_y(speed,point_direction(temp_id.x,temp_id.y,x,y))
                
                        if place_free(x+temp1,y+temp2)
                        {
                    
                        x+=temp1
                        y+=temp2
                        
                        }
                        
                    }
                    
                
            
                }
            
            
                
            //move_outside_solid(temp_dir-180,16)
            
            
            }
        
            
        
    
        
        
        
        //effects monster...
            
        
            sprint=0
            
            aggro=1
        
            if object_index=obj_shabom
            {direction=point_direction(obj_link.x,obj_link.y,x,y)}
            /*
            if hinox=1
            {
                sprint=0
                moving_speed=0
                alarm[0]=choose(alarm0_1,alarm0_2,alarm0_3)
            }
            */
        
            stopped=stop_after_attack_time*global.stop_after_attack_time_mod
            stunned=stopped
            
            //pushes mon away
            if mass&lt;=100
            {
            
                var temp_dir;
                temp_dir=point_direction(obj_link.x,obj_link.y-obj_link.z,x,y-z)
                {
                    knockback=attack_retreat*global.knockback_force
                    knockback_dir=temp_dir
                }
            
            }
            
            if object_index=obj_keese
            {
                image_index=1
            }
            
            if object_index=obj_keese_fire
            {
                obj=instance_create(x,y,obj_keese)
                obj.slowed=slowed
                obj.stunned=stunned
                obj.frozen=frozen
                obj.burned=burned
                obj.shocked=shocked
                x=-50
                y=-50
                instance_destroy()
            }
            
            //
            
            
            
        }   
    
    }
}


if obj_link.z&gt;global.link_aerial_dodge
obj_link.y+=obj_link.z
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEATH MANAGEMENT



///DROWNING


if place_meeting(x,y,obj_moving_platform_td_par)=0
if z=0
{
        
    
    var yt, b, bd, by;
    yt=4
    b=3
    bd=5
    
    if position_meeting(x,y+yt,obj_deep_water_par)
    if position_meeting(x-b,y+yt-2,obj_deep_water_par)
    if position_meeting(x-b,y+yt+bd,obj_deep_water_par)
    if position_meeting(x+b,y+yt-2,obj_deep_water_par)
    if position_meeting(x+b,y+yt+bd,obj_deep_water_par)
    {
        
        if position_meeting(x-7,y+yt,obj_deep_water_par)=0
        or position_meeting(x+7,y+yt,obj_deep_water_par)=0
        x=instance_position(x,y+yt,obj_deep_water_par).x+8
        if position_meeting(x,y-7+yt,obj_deep_water_par)=0
        or position_meeting(x,y+7+yt,obj_deep_water_par)=0
        y=instance_position(x,y+yt,obj_deep_water_par).y+8
        
        scr_drown()
        
        
    }

}


if sprite_index=spr_link_drowning
{

    drown+=1
    if drown&gt;30
    {
    
        if place_meeting(x,y,obj_teleporter)=0
        {
            scr_restart()
            
            global.link_life-=2
        }
    
    }
    
}









if sprite_index=spr_link_falling
{

if image_index&gt;2
image_index=2

    drown+=1
    if drown&gt;30
    {
    
        if place_meeting(x,y,obj_teleporter)=0
        {
            scr_restart()
            
            global.link_life-=2
        }
    
    }
    
}


if sprite_index=spr_link_ouchno
{

    drown+=1
    if drown&gt;60
    {
    
        scr_restart()
        
        global.link_life-=2
    
    }
    
}






if dead=0
if global.link_life&lt;=0
{
    scr_die()
}


if gameover
{

    sprite_index=spr_link_death

    drown+=1
    depth=-999999
    
    if drown&lt;30
    {
        if round(image_index)=4
        {
        image_index-=4
        }
    }
    else
    if round(image_index)=4
    {
        image_index=4
        image_speed=0
        
        //LOADING GAME AFTER DEATH
            if keyboard_check_pressed(vk_anykey)
            {
                game_load("autosave")
            }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///FIRING THE BOW


if global.show_inventory=1
exit
if sprite_index=spr_link_knocked_down
{
    notched=0
    exit
}


var go, silver;
go=0
silver=0



if keyboard_check(ord('V'))=0
if global.item_V="Bow"
go=1
if keyboard_check(ord('C'))=0
if global.item_C="Bow"
go=1
if keyboard_check(ord('X'))=0
if global.item_X="Bow"
go=1
if keyboard_check(ord('Z'))=0
if global.item_Z="Bow"
go=1


if keyboard_check(ord('V'))=0
if global.item_V="Silver Bow"
{
go=1
silver=1
}
if keyboard_check(ord('C'))=0
if global.item_C="Silver Bow"
{
go=1
silver=1
}
if keyboard_check(ord('X'))=0
if global.item_X="Silver Bow"
{
go=1
silver=1
}
if keyboard_check(ord('Z'))=0
if global.item_Z="Silver Bow"
{
go=1
silver=1
}



////////////////////////////////////////////////////////////////////
if stunned&gt;0
{
go=1 //shoot the bow if you get stunned (but not if the arrow isn't notched)

    if notched=0
    {

    sprite_index=spr_link_walking
    hurt_sprite=spr_link_walking_hurt
    
    
    exit
    }
}

if go=0 exit

if notched=0
{

    //sprite_index=spr_link_walking
    //hurt_sprite=spr_link_walking_hurt

    exit

}
////////////////////////////////////////////////////////////////////




//fire the bow


image_index_mod+=1


//this prevents two arrows being drawn at once
if image_index+round(image_index_mod)*4&lt;12
image_index_mod+=1


alarm[4]=3

//can_shoot=0
notched=0
//alarm[5]=10



if global.link_arrow_quantity&gt;0
{

    global.link_arrow_quantity-=1

    obj=instance_create(x+xg,y+yg,obj_links_bolt)
    if image_index=0
    obj.y+=3
    if image_index=2
    obj.y+=2
    
    obj.spell="Arrow"
    if silver=0
    obj.damage=global.link_bow_damage
    else
    obj.damage=global.link_silver_bow_damage
    
    obj.silver=silver
    obj.light=silver*global.link_silver_bow_light
    
    obj.sprite_index=spr_arrow
    obj.image_index=silver
    obj.image_speed=0
    
    obj.speed=global.link_arrow_speed
    
    if global.link_bow_charge=1
    if bow_charge&gt;=global.link_bow_charge_time
    {
        if silver=0
        {
            obj.sprite_index=spr_arrow_charge_fairy
        }
        else
        {
            obj.sprite_index=spr_arrow_charge_silver
            obj.light+=global.link_silver_bow_charge_light
        }
        
        obj.image_speed=1
        obj.speed+=global.link_bow_charge_speed
        obj.damage+=global.link_bow_charge_damage
    }
    
    obj.alarm[10]=global.link_arrow_distance
    obj.stick_in_target=1
    
    obj.direction=image_index*90

}

else

{

//sound_play(snd_no_arrows)

}




bow_charge=0





</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jumping push


if global.show_inventory=1
exit

if shifting_view=1
exit




if jump=1
if jump_dir_real!=-1
{

        var xb, yb;
        xb=lengthdir_x(jump_speed,jump_dir_real)
        yb=lengthdir_y(jump_speed,jump_dir_real)
        
        
    if cliff_jump
    {
            x+=xb
            y+=yb
    }
    else
    {
        if place_meeting(x+xb,y,obj_barrier_par)=0
        {
            x+=xb
        }
        if place_meeting(x,y+yb,obj_barrier_par)=0
        {
            y+=yb
        }
    }

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Getting knocked back


if global.show_inventory=1 exit

if dead=1 exit

if shifting_view=1 exit

if cliff_jump
{
    knockback=0
    exit
}



if sprite_index=spr_link_knocked_down
knockback=0


if knockback&gt;0
{

    var xb, yb, boundary;
    boundary=6
    xb=lengthdir_x(knockback,knockback_dir)
    yb=lengthdir_y(knockback,knockback_dir)
    while abs(xb)&gt;0
    {
        if place_meeting(x+xb,y,obj_barrier_par)=0
        if x+xb&lt;view_xview+view_wview-boundary
        if x+xb&gt;view_xview+boundary
        {
            x+=xb
            break
        }
        
        xb-=1*sign(xb)
        if abs(xb)&lt;=1
        xb=0
    }
    while abs(yb)&gt;0
    {
        if place_meeting(x,y+yb,obj_barrier_par)=0
        if y+yb&lt;view_yview+view_hview-boundary
        if y+yb&gt;view_yview+boundary+16
        {
            y+=yb
            break
        }
        
        yb-=1*sign(yb)
        if abs(yb)&lt;=1
        yb=0
    }
    
    knockback-=global.knockback_decay_rate

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy_sword">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var temp_id;
temp_id=other.enemy_id


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
if instance_exists(temp_id)=0 exit
with temp_id if variable_local_exists("dead")=0 exit
if temp_id.dead=1 exit
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




if abs(other.z-z)&lt;global.link_aerial_dodge
if hit&lt;=0
{

    var temp_dir;
    temp_dir=point_direction(obj_link.x,obj_link.y-obj_link.z,temp_id.x,temp_id.y-temp_id.z)

    temp_id.knockback=temp_id.force/temp_id.mass*global.knockback_force
    temp_id.knockback_dir=temp_dir
    temp_id.stopped=temp_id.stop_after_attack_time*global.stop_after_attack_time_mod
    temp_id.stunned=temp_id.stopped
    
    knockback=other.force/mass*global.knockback_force
    knockback_dir=other.dir
    
    
    hit=global.link_hit
    
    global.link_life-=other.damage
    global.link_life-=other.fire
    burned=other.fire*global.burn_time*global.link_res_fire
    frozen=other.ice*global.freeze_time*global.link_res_ice
    shocked=other.shock*global.shock_time*global.link_res_lightning
    slowed=other.slow
    stunned=other.stun
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.autosave_this_time
game_save("autosave")
else global.autosave_this_time=1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///wetness

xg=0
yg=0

wet=0


if place_meeting(x,y,obj_moving_platform_td_par)
or z&gt;0
{   
    exit
}


var yt, b, bd;
yt=4
b=3
bd=4


if position_meeting(x,y+yt,obj_water_par)
if position_meeting(x-b,y+yt-2,obj_water_par)
if position_meeting(x-b,y+yt+bd,obj_water_par)
if position_meeting(x+b,y+yt-2,obj_water_par)
if position_meeting(x+b,y+yt+bd,obj_water_par)
{
    wet=1
    if splash
    scr_splash(x+xg,y+yg+4)
}




if wet=1
yg=2
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if z&gt;3
draw_sprite_ext(spr_shadow1,0,xg+round(x),yg+round(y)+6,1,1,0,c_white,.75)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if sprite_index=spr_link_walking
or sprite_index=spr_link_pulling
or sprite_index=spr_link_holding
or sprite_index=spr_link_got_item_big
or sprite_index=spr_link_got_item_small
{

    draw_sprite(sprite_index_drawn,image_index+round(image_index_mod)*4     +global.essence_din_active*8+global.essence_nayru_active*16+global.essence_farore_active*24,xg+round(x),yg+round(y)-round(z))

    
}


if sprite_index=spr_link_knocked_down
draw_sprite(sprite_index,global.essence_din_active+global.essence_nayru_active*2+global.essence_farore_active*3,xg+round(x),yg+round(y)-round(z))



if sprite_index=spr_link_rolling_horizontal
{

    draw_sprite_ext(sprite_index_drawn,image_index     +global.essence_din_active+global.essence_nayru_active*2+global.essence_farore_active*3,xg+round(x),yg+round(y)-round(z),imagexflip,imageyflip,imageangle,c_white,image_alpha)
    exit
    
}
if sprite_index=spr_link_rolling_vertical
{

    draw_sprite_ext(sprite_index_drawn,image_index     +global.essence_din_active*3+global.essence_nayru_active*6+global.essence_farore_active*9,xg+round(x),yg+round(y)-round(z),imagexflip,imageyflip,imageangle,c_white,image_alpha)
    exit
    
}




if sprite_index=spr_link_cutting
{

    draw_sprite(sprite_index_drawn,image_index_drawn     +global.essence_din_active*8+global.essence_nayru_active*16+global.essence_farore_active*24,xg+round(x),yg+round(y)-round(z))
    exit
    
}





if sprite_index=spr_link_shooting
{

    var arrow_index;
    arrow_index=global.link_silver_bow
    
    
    //draw arrow
    var xa, ya, rot;
    xa=0
    ya=0
    rot=image_index*90
    
    if notched=1
    
        //
    if image_index=1
    or image_index=3
        //
        
    {
        if image_index=1
        {
            xa=0
            ya=-5
        }
        if image_index=3
        {
            xa=-1
            ya=6
        }
        
        var go;
        go=0
        if global.link_bow_charge=1
        if bow_charge&gt;=global.link_bow_charge_time
        go=1
        
        if go=1
        {
            if arrow_index=0
            draw_sprite_ext(spr_arrow_charge_fairy,is_even(stunned),xg+round(x)+xa,yg+round(y)-round(z)+ya,1,1,rot,c_white,1)
            if arrow_index=1
            draw_sprite_ext(spr_arrow_charge_silver,is_even(stunned),xg+round(x)+xa,yg+round(y)-round(z)+ya,1,1,rot,c_white,1)
        }
        else
        draw_sprite_ext(spr_arrow,arrow_index,xg+round(x)+xa,yg+round(y)+ya-round(z),1,1,rot,c_white,1)
    }
    
    
    
//draw Link
draw_sprite(sprite_index_drawn,image_index+round(image_index_mod)*4     +global.essence_din_active*16+global.essence_nayru_active*32+global.essence_farore_active*48,xg+round(x),yg+round(y)-round(z))
    
    
    
    //draw arrow
    if notched=1
    
        //
    if image_index=0
    or image_index=2
        //
    
    {
        if image_index=0
        {
            xa=6
            ya=3
        }
        if image_index=2
        {
            xa=-7
            ya=2
        }
        
        var go;
        go=0
        if global.link_bow_charge=1
        if bow_charge&gt;=global.link_bow_charge_time
        go=1
        
        if go=1
        {
            if arrow_index=0
            draw_sprite_ext(spr_arrow_charge_fairy,is_even(stunned),xg+round(x)+xa,yg+round(y)-round(z)+ya,1,1,rot,c_white,1)
            if arrow_index=1
            draw_sprite_ext(spr_arrow_charge_silver,is_even(stunned),xg+round(x)+xa,yg+round(y)-round(z)+ya,1,1,rot,c_white,1)
        }
        else
        draw_sprite_ext(spr_arrow,arrow_index+2,xg+round(x)+xa,yg+round(y)+ya-round(z),1,1,rot,c_white,1)
    }
        
    exit
    
}









if sprite_index=spr_link_pushing
{

    image_index=pushing_dir/90
    draw_sprite(sprite_index_drawn,image_index+round(image_index_mod)*4     +global.essence_din_active*8+global.essence_nayru_active*16+global.essence_farore_active*24,xg+round(x),yg+round(y)-round(z))
    
    exit
    
}




if sprite_index=spr_link_falling
or sprite_index=spr_link_drowning
or sprite_index=spr_link_ouchno
or sprite_index=spr_link_death
{

    draw_sprite(sprite_index,image_index,round(x),round(y)-round(z))
    
    exit
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if burned&gt;0
{

    draw_sprite_ext(spr_fire_ball_large,is_even(stunned),xg+round(x),yg+round(y)-round(z),1,1,270,c_white,1)

}

if frozen&gt;0
{

    if stunned&gt;=0
    if stunned&lt;15
    draw_sprite(spr_ice_crystal,0,xg+round(x)+is_even(stunned),yg+round(y)-round(z))
    
    if stunned&gt;=15
    draw_sprite(spr_ice_crystal,0,xg+round(x),yg+round(y)-round(z))

}

if windy=1
{
    draw_sprite(spr_tornado_green,is_even(stunned),xg+round(x),yg+round(y)-round(z))
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if dead=1 exit
if wet=1
{
    waveindex+=.2
    draw_sprite(spr_waves,waveindex,xg+round(x),yg+round(y))
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="114">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*

global.link_rupees=9999
global.link_wallet=9999
global.link_rupees_display=global.link_rupees






global.link_feather=1
global.link_cape=1


global.link_boomerang=1

global.link_magic_boomerang=1



global.link_dins_essence=1
global.link_nayrus_essence=1
global.link_farores_essence=1




/*
global.link_sword_beam=1
global.link_sword_beam_time=13
global.link_sword_beam_speed=7
global.link_sword_beam_min_time=7
*/


global.link_wooden_sword=1

global.link_kokiri_sword=1

global.link_razor_sword=1

global.link_biggorons_sword=1

global.link_master_sword=1

global.link_silver_bow=1

global.link_bombs=1
global.link_bomb_quantity=100
global.link_bomb_bag=100

global.link_ocarina_of_time=1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="87">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>y-=300/(1+keyboard_check(vk_shift))*keyboard_check(vk_control)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>y+=300/(1+keyboard_check(vk_shift))*keyboard_check(vk_control)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

//if keyboard_check(vk_shift)=1
{
    game_restart()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*

sound_global_volume(!global.game_volume)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x+=300/(1+keyboard_check(vk_shift))*keyboard_check(vk_control)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="65">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x-=300/(1+keyboard_check(vk_shift))*keyboard_check(vk_control)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
